import { type NextRequest, NextResponse } from "next/server"
import { IntegratedDiseaseRAGService } from "@/lib/model/integrated-disease-rag"
import { WeatherService } from "@/lib/weather/service"

export async function POST(request: NextRequest) {
  try {
    const formData = await request.formData()
    const image = formData.get("image") as File
    const textQuery = (formData.get("textQuery") as string) || ""
    const language = (formData.get("language") as string) || "en"
    const userLocation = (formData.get("userLocation") as string) || null

    if (!image) {
      return NextResponse.json({ error: "Image is required" }, { status: 400 })
    }

    console.log(
      `Image Analysis API called with language: "${language}", location: "${userLocation}", text query: "${textQuery}"`
    )

    // Initialize services
    const integratedService = new IntegratedDiseaseRAGService()
    const weatherService = new WeatherService()

    let weatherData = null

    // Get weather data if location is provided
    if (userLocation) {
      try {
        console.log(`Fetching weather data for: ${userLocation}`)
        weatherData = await weatherService.getWeatherData(userLocation)
        console.log(`Weather data fetched:`, weatherData)
      } catch (weatherError) {
        console.log("Weather service error, using mock data:", weatherError)
        weatherData = {
          temperature: 28,
          humidity: 70,
          condition: "Partly cloudy",
          description: "Good conditions for farming activities",
        }
      }
    }

    try {
      // Convert image to buffer
      const imageBuffer = Buffer.from(await image.arrayBuffer())

      // Analyze image with integrated ML + RAG system
      console.log("Starting integrated image analysis...")
      const analysisResult = await integratedService.analyzeImageWithRAG({
        imageBuffer,
        textQuery,
        language,
        userLocation: userLocation || undefined,
        weatherData
      })

      console.log("Image analysis completed successfully")

      // Format response for the frontend
      const formattedResponse = formatAnalysisForFrontend(analysisResult, weatherData)

      return NextResponse.json({
        results: [formattedResponse],
        query: textQuery || "Image analysis",
        language,
        userLocation,
        weatherData,
        source: "ml_model_with_rag",
        analysisDetails: {
          diseaseDetected: analysisResult.diseaseDetection.prediction,
          confidence: analysisResult.diseaseDetection.confidence,
          plantType: analysisResult.diseaseDetection.diseaseInfo?.plant,
          isHealthy: analysisResult.diseaseDetection.diseaseInfo?.isHealthy
        },
        timestamp: new Date().toISOString(),
      })

    } catch (analysisError) {
      console.error("Integrated analysis failed:", analysisError)

      // Fallback to basic response
      const fallbackTitle = language === "hi" 
        ? "‡§õ‡§µ‡§ø ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ"
        : language === "te"
        ? "‡∞ö‡∞ø‡∞§‡±ç‡∞∞ ‡∞µ‡∞ø‡∞∂‡±ç‡∞≤‡±á‡∞∑‡∞£‡∞≤‡±ã ‡∞∏‡∞Æ‡∞∏‡±ç‡∞Ø"
        : language === "bn"
        ? "‡¶õ‡¶¨‡¶ø ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ"
        : language === "ta"
        ? "‡Æ™‡Æü‡ÆÆ‡Øç ‡Æ™‡Æï‡ØÅ‡Æ™‡Øç‡Æ™‡Ææ‡ÆØ‡Øç‡Æµ‡Æø‡Æ≤‡Øç ‡Æö‡Æø‡Æï‡Øç‡Æï‡Æ≤‡Øç"
        : "Image Analysis Issue"

      const fallbackContent = language === "hi"
        ? "‡§õ‡§µ‡§ø ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§∏‡§Æ‡§∞‡•ç‡§•‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§æ‡§´ ‡§õ‡§µ‡§ø ‡§ï‡•á ‡§∏‡§æ‡§• ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§∏‡•ç‡§•‡§æ‡§®‡•Ä‡§Ø ‡§ï‡•É‡§∑‡§ø ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç‡•§"
        : language === "te"
        ? "‡∞ö‡∞ø‡∞§‡±ç‡∞∞‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞µ‡∞ø‡∞∂‡±ç‡∞≤‡±á‡∞∑‡∞ø‡∞Ç‡∞ö‡∞≤‡±á‡∞ï‡∞™‡±ã‡∞Ø‡∞æ‡∞Æ‡±Å. ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞∏‡±ç‡∞™‡∞∑‡±ç‡∞ü‡∞Æ‡±à‡∞® ‡∞ö‡∞ø‡∞§‡±ç‡∞∞‡∞Ç‡∞§‡±ã ‡∞Æ‡∞≥‡±ç‡∞≤‡±Ä ‡∞™‡±ç‡∞∞‡∞Ø‡∞§‡±ç‡∞®‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø ‡∞≤‡±á‡∞¶‡∞æ ‡∞∏‡±ç‡∞•‡∞æ‡∞®‡∞ø‡∞ï ‡∞µ‡±ç‡∞Ø‡∞µ‡∞∏‡∞æ‡∞Ø ‡∞®‡∞ø‡∞™‡±Å‡∞£‡±Å‡∞°‡∞ø‡∞®‡∞ø ‡∞∏‡∞Ç‡∞™‡±ç‡∞∞‡∞¶‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø."
        : language === "bn"
        ? "‡¶õ‡¶¨‡¶ø ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡¶§‡ßá ‡¶Ö‡¶ï‡ßç‡¶∑‡¶Æ‡•§ ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶™‡¶∞‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∞ ‡¶õ‡¶¨‡¶ø ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶¨‡¶æ ‡¶∏‡ßç‡¶•‡¶æ‡¶®‡ßÄ‡¶Ø‡¶º ‡¶ï‡ßÉ‡¶∑‡¶ø ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑‡¶ú‡ßç‡¶û‡ßá‡¶∞ ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶®‡¶ø‡¶®‡•§"
        : language === "ta"
        ? "‡Æ™‡Æü‡Æ§‡Øç‡Æ§‡Øà ‡Æ™‡Æï‡ØÅ‡Æ™‡Øç‡Æ™‡Ææ‡ÆØ‡Øç‡Æµ‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ ‡ÆÆ‡ØÅ‡Æü‡Æø‡ÆØ‡Æµ‡Æø‡Æ≤‡Øç‡¶≤‡Øà. ‡Æ§‡ÆØ‡Æµ‡ØÅ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ ‡Æ§‡ØÜ‡Æ≥‡Æø‡Æµ‡Ææ‡Æ© ‡Æ™‡Æü‡Æ§‡Øç‡Æ§‡ØÅ‡Æü‡Æ©‡Øç ‡ÆÆ‡ØÄ‡Æ£‡Øç‡Æü‡ØÅ‡ÆÆ‡Øç ‡ÆÆ‡ØÅ‡ÆØ‡Æ±‡Øç‡Æö‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç ‡ÆÖ‡Æ≤‡Øç‡Æ≤‡Æ§‡ØÅ ‡Æâ‡Æ≥‡Øç‡Æ≥‡ØÇ‡Æ∞‡Øç ‡Æµ‡Æø‡Æµ‡Æö‡Ææ‡ÆØ ‡Æ®‡Æø‡Æ™‡ØÅ‡Æ£‡Æ∞‡Øà ‡ÆÖ‡Æ£‡ØÅ‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç."
        : "Unable to analyze the image. Please try again with a clearer image or consult a local agricultural expert."

      return NextResponse.json({
        results: [
          {
            id: Date.now().toString(),
            title: fallbackTitle,
            content: fallbackContent,
            category: "image_analysis_error",
            subcategory: "fallback_response",
            language: language,
            tags: ["image", "error", "fallback"],
            similarity: 0.5,
            source: "error_fallback",
            weatherData: weatherData,
          },
        ],
        query: textQuery || "Image analysis",
        language,
        userLocation,
        weatherData,
        source: "error_fallback",
        note: "Image analysis failed - providing fallback guidance",
        timestamp: new Date().toISOString(),
      })
    }

  } catch (error) {
    console.error("Image search API critical error:", error)

    const errorResponse = {
      error: "Image analysis service temporarily unavailable",
      fallback: "Please consult your local agricultural extension office for plant disease identification",
      timestamp: new Date().toISOString(),
    }

    return NextResponse.json(errorResponse, { status: 503 })
  }
}

// Helper function to format analysis result for frontend
function formatAnalysisForFrontend(analysisResult: any, weatherData: any) {
  const { diseaseDetection, detailedAdvice, preventiveMeasures, treatmentPlan, futureCarePlans } = analysisResult

  // Combine all advice into a comprehensive response
  const comprehensiveContent = `
${detailedAdvice}

üõ°Ô∏è PREVENTIVE MEASURES:
${preventiveMeasures}

üíä TREATMENT PLAN:
${treatmentPlan}

üìÖ FUTURE CARE:
${futureCarePlans}
  `.trim()

  const title = diseaseDetection.diseaseInfo?.isHealthy
    ? `Healthy ${diseaseDetection.diseaseInfo.plant} - Maintenance Guide`
    : `${diseaseDetection.diseaseInfo?.disease} in ${diseaseDetection.diseaseInfo?.plant} - Treatment Guide`

  return {
    id: Date.now().toString(),
    title: title,
    content: comprehensiveContent,
    category: "disease_analysis",
    subcategory: diseaseDetection.diseaseInfo?.isHealthy ? "healthy_plant" : "disease_treatment",
    language: analysisResult.language,
    tags: [
      "disease-detection", 
      "ml-model", 
      "rag-system", 
      diseaseDetection.diseaseInfo?.plant?.toLowerCase(),
      diseaseDetection.diseaseInfo?.isHealthy ? "healthy" : "disease"
    ],
    similarity: diseaseDetection.confidence || 0.8,
    source: "ml_model_with_rag",
    weatherData: weatherData,
    diseaseInfo: diseaseDetection.diseaseInfo,
    modelPrediction: diseaseDetection.prediction,
    confidence: diseaseDetection.confidence
  }
}
