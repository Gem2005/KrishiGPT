import { type NextRequest, NextResponse } from "next/server"
import { KrishiRAGChain } from "@/lib/langchain/rag-chain"
import { WeatherService } from "@/lib/weather/service"

function isViabilityQuestion(query: string): boolean {
  const queryLower = query.toLowerCase()
  
  const viabilityIndicators = [
    "should i grow", "should i plant", "should i cultivate",
    "is it profitable", "is it worth", "economic viability",
    "profitable to grow", "good to grow", "recommend growing",
    "worth growing", "invest in", "start growing",
    "‡§ï‡•ç‡§Ø‡§æ ‡§Æ‡•Å‡§ù‡•á", "‡§â‡§ó‡§æ‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è", "‡§´‡§æ‡§Ø‡§¶‡•á‡§Æ‡§Ç‡§¶ ‡§π‡•à", "‡§≤‡§æ‡§≠‡§ï‡§æ‡§∞‡•Ä ‡§π‡•à"
  ]

  return viabilityIndicators.some(indicator => queryLower.includes(indicator))
}

export async function POST(request: NextRequest) {
  try {
    const { query, language = "en", userLocation } = await request.json()

    if (!query || typeof query !== "string") {
      return NextResponse.json({ error: "Query is required" }, { status: 400 })
    }

    console.log(
      `LangChain Search API called with query: "${query}", location: "${userLocation}", language: "${language}"`,
    )

    // Initialize services
    const ragChain = new KrishiRAGChain()
    const weatherService = new WeatherService()

    let weatherData = null

    // Get weather data if location is provided
    if (userLocation) {
      try {
        console.log(`Fetching weather data for: ${userLocation}`)
        weatherData = await weatherService.getWeatherData(userLocation)
        console.log(`Weather data fetched:`, weatherData)
      } catch (weatherError) {
        console.log("Weather service error, using mock data:", weatherError)
        weatherData = {
          temperature: 28,
          humidity: 70,
          condition: "Partly cloudy",
          description: "Good conditions for farming activities",
        }
      }
    }

    try {
      // Use LangChain RAG system to generate response
      console.log("Generating response using LangChain RAG...")

      // Check if this is a viability question that would benefit from market analysis
      const includeMarketAnalysis = isViabilityQuestion(query)
      
      const aiResponse = await ragChain.generateResponse(query, {
        userLocation,
        language,
        weatherData,
        includeMarketAnalysis,
      })

      console.log(`LangChain RAG response generated successfully (market analysis: ${includeMarketAnalysis})`)

      if (!aiResponse || aiResponse.trim().length === 0) {
        throw new Error("RAG system generated empty response")
      }

      return NextResponse.json({
        results: [
          {
            id: Date.now().toString(),
            title: userLocation ? `Agricultural Advice for ${userLocation}` : "KrishiGPT AI Assistant",
            content: aiResponse,
            category: "langchain_rag",
            subcategory: "ai_generated",
            language: language,
            tags: ["ai", "langchain", "rag", "farming"],
            similarity: 1.0,
            source: "langchain_rag",
            weatherData: weatherData,
          },
        ],
        query,
        language,
        userLocation,
        weatherData,
        source: "langchain_rag",
        timestamp: new Date().toISOString(),
      })
    } catch (ragError) {
      console.error("LangChain RAG system error:", ragError)

      // Fallback to knowledge search if RAG fails
      try {
        console.log("RAG failed, attempting knowledge search fallback...")

        const knowledgeResults = await ragChain.searchKnowledge(query, {
          language,
          userLocation,
        })

        if (knowledgeResults.length > 0) {
          // Use the most relevant knowledge piece
          const bestMatch = knowledgeResults[0]
          let fallbackResponse = bestMatch.pageContent

          // Add location and weather context if available
          if (userLocation && weatherData) {
            const contextPrefix =
              language === "hi"
                ? `${userLocation} ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•É‡§∑‡§ø ‡§∏‡§≤‡§æ‡§π (‡§Æ‡•å‡§∏‡§Æ: ${weatherData.temperature}¬∞C, ${weatherData.condition}):\n\n`
                : language === "te"
                  ? `${userLocation} ‡∞ï‡±ã‡∞∏‡∞Ç ‡∞µ‡±ç‡∞Ø‡∞µ‡∞∏‡∞æ‡∞Ø ‡∞∏‡∞≤‡∞π‡∞æ (‡∞µ‡∞æ‡∞§‡∞æ‡∞µ‡∞∞‡∞£‡∞Ç: ${weatherData.temperature}¬∞C, ${weatherData.condition}):\n\n`
                  : `Agricultural advice for ${userLocation} (Weather: ${weatherData.temperature}¬∞C, ${weatherData.condition}):\n\n`

            fallbackResponse = contextPrefix + fallbackResponse
          }

          return NextResponse.json({
            results: [
              {
                id: Date.now().toString(),
                title: userLocation ? `Knowledge for ${userLocation}` : "Agricultural Knowledge",
                content: fallbackResponse,
                category: "knowledge_search",
                subcategory: "vector_search",
                language: language,
                tags: ["knowledge", "vector", "search"],
                similarity: 0.9,
                source: "knowledge_fallback",
                weatherData: weatherData,
              },
            ],
            query,
            language,
            userLocation,
            weatherData,
            source: "knowledge_fallback",
            note: "AI generation failed - using vector search results",
            timestamp: new Date().toISOString(),
          })
        }

        throw new Error("No knowledge found")
      } catch (knowledgeError) {
        console.error("Knowledge search also failed:", knowledgeError)

        // Final static fallback
        const staticResponse = getStaticFallback(query, userLocation, weatherData, language)

        return NextResponse.json({
          results: [
            {
              id: Date.now().toString(),
              title: "Agricultural Guidance",
              content: staticResponse,
              category: "static_fallback",
              subcategory: "emergency_response",
              language: language,
              tags: ["static", "fallback", "guidance"],
              similarity: 0.7,
              source: "static_fallback",
              weatherData: weatherData,
            },
          ],
          query,
          language,
          userLocation,
          weatherData,
          source: "static_fallback",
          note: "All AI services unavailable - providing basic guidance",
          timestamp: new Date().toISOString(),
        })
      }
    }
  } catch (error) {
    console.error("Search API critical error:", error)

    const errorResponse = {
      error: "Service temporarily unavailable",
      fallback: "Please consult your local agricultural extension office for immediate assistance",
      timestamp: new Date().toISOString(),
    }

    return NextResponse.json(errorResponse, { status: 503 })
  }
}

// Static fallback method with proper emoji formatting
function getStaticFallback(query: string, location: string | null, weather: any, language: string): string {
  const lowerQuery = query.toLowerCase()
  const locationText = location ? `${location}` : "your area"
  const weatherCondition = weather ? `${weather.temperature}¬∞C, ${weather.condition}` : "current conditions"

  // Rice cultivation advice with proper formatting
  if (lowerQuery.includes("rice") || lowerQuery.includes("‡§ß‡§æ‡§®") || lowerQuery.includes("‡∞µ‡∞∞‡∞ø") || lowerQuery.includes("‡¶ß‡¶æ‡¶®") || lowerQuery.includes("‡ÆÖ‡Æ∞‡Æø‡Æö‡Æø")) {
    if (language === "hi") {
      return `üå§Ô∏è ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§∏‡•ç‡§•‡§ø‡§§‡§ø‡§Ø‡§æ‡§Ç: ${locationText} ‡§Æ‡•á‡§Ç ‡§Æ‡•å‡§∏‡§Æ ${weatherCondition} - ‡§ß‡§æ‡§® ‡§ï‡•Ä ‡§ñ‡•á‡§§‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§

üåæ ‡§§‡§§‡•ç‡§ï‡§æ‡§≤ ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•á‡§Ç: ‚Ä¢ ‡§ú‡•Ç‡§®-‡§ú‡•Å‡§≤‡§æ‡§à ‡§Æ‡•á‡§Ç ‡§¨‡•Å‡§Ü‡§à ‡§ï‡§∞‡•á‡§Ç ‚Ä¢ ‡§ñ‡•á‡§§ ‡§Æ‡•á‡§Ç 2-5 ‡§∏‡•á‡§Æ‡•Ä ‡§™‡§æ‡§®‡•Ä ‡§¨‡§®‡§æ‡§è ‡§∞‡§ñ‡•á‡§Ç

üìã ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§∏‡§≤‡§æ‡§π: ‚Ä¢ ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§ï‡§ø‡§∏‡•ç‡§Æ ‡§ï‡•á ‡§¨‡•Ä‡§ú ‡§ï‡§æ ‡§ö‡§Ø‡§® ‡§ï‡§∞‡•á‡§Ç ‚Ä¢ ‡§®‡§æ‡§á‡§ü‡•ç‡§∞‡•ã‡§ú‡§®, ‡§´‡§æ‡§∏‡•ç‡§´‡•ã‡§∞‡§∏, ‡§™‡•ã‡§ü‡§æ‡§∂ ‡§ï‡§æ ‡§∏‡§Ç‡§§‡•Å‡§≤‡§ø‡§§ ‡§â‡§™‡§Ø‡•ã‡§ó ‚Ä¢ ‡§â‡§∞‡•ç‡§µ‡§∞‡§ï ‡§ï‡•Ä ‡§Æ‡§æ‡§§‡•ç‡§∞‡§æ: 120:60:40 ‡§ï‡§ø‡§ó‡•ç‡§∞‡§æ/‡§π‡•á‡§ï‡•ç‡§ü‡•á‡§Ø‡§∞

‚ö†Ô∏è ‡§∏‡§æ‡§µ‡§ß‡§æ‡§®‡§ø‡§Ø‡§æ‡§Ç: ‚Ä¢ ‡§ï‡•Ä‡§ü-‡§∞‡•ã‡§ó ‡§ï‡•Ä ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä ‡§ï‡§∞‡•á‡§Ç ‚Ä¢ ‡§™‡§æ‡§®‡•Ä ‡§ï‡•Ä ‡§ó‡•Å‡§£‡§µ‡§§‡•ç‡§§‡§æ ‡§¨‡§®‡§æ‡§è ‡§∞‡§ñ‡•á‡§Ç

üìÖ ‡§∏‡§Æ‡§Ø: ‚Ä¢ ‡§∏‡•Å‡§¨‡§π 6-8 ‡§¨‡§ú‡•á ‡§ñ‡•á‡§§‡•Ä ‡§ï‡•á ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡•á‡§Ç ‚Ä¢ ‡§∂‡§æ‡§Æ 4-6 ‡§¨‡§ú‡•á ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç`
    } else if (language === "te") {
      return `üå§Ô∏è ‡∞™‡±ç‡∞∞‡∞∏‡±ç‡∞§‡±Å‡∞§ ‡∞™‡∞∞‡∞ø‡∞∏‡±ç‡∞•‡∞ø‡∞§‡±Å‡∞≤‡±Å: ${locationText}‡∞≤‡±ã ‡∞µ‡∞æ‡∞§‡∞æ‡∞µ‡∞∞‡∞£‡∞Ç ${weatherCondition} - ‡∞µ‡∞∞‡∞ø ‡∞∏‡∞æ‡∞ó‡±Å‡∞ï‡±Å ‡∞Ö‡∞®‡±Å‡∞ï‡±Ç‡∞≤‡∞Ç

üåæ ‡∞§‡∞ï‡±ç‡∞∑‡∞£ ‡∞∏‡∞ø‡∞´‡∞æ‡∞∞‡±ç‡∞∏‡±Å‡∞≤‡±Å: ‚Ä¢ ‡∞ú‡±Ç‡∞®‡±ç-‡∞ú‡±Ç‡∞≤‡±à‡∞≤‡±ã ‡∞µ‡∞ø‡∞§‡±ç‡∞§‡∞®‡∞æ‡∞≤‡±Å ‡∞®‡∞æ‡∞ü‡∞Ç‡∞°‡∞ø ‚Ä¢ ‡∞™‡±ä‡∞≤‡∞Ç‡∞≤‡±ã 2-5 ‡∞∏‡±Ü‡∞Ç‡∞ü‡±Ä‡∞Æ‡±Ä‡∞ü‡∞∞‡±ç‡∞≤‡±Å ‡∞®‡±Ä‡∞∞‡±Å ‡∞â‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø

üìã ‡∞µ‡∞ø‡∞µ‡∞∞‡∞£‡∞æ‡∞§‡±ç‡∞Æ‡∞ï ‡∞∏‡∞≤‡∞π‡∞æ: ‚Ä¢ ‡∞Æ‡∞Ç‡∞ö‡∞ø ‡∞∞‡∞ï‡∞Ç ‡∞µ‡∞ø‡∞§‡±ç‡∞§‡∞®‡∞æ‡∞≤‡±Å ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø ‚Ä¢ ‡∞®‡∞§‡±ç‡∞∞‡∞ú‡∞®‡∞ø, ‡∞≠‡∞æ‡∞∏‡±ç‡∞µ‡∞∞‡∞Ç, ‡∞™‡±ä‡∞ü‡∞æ‡∞∑‡±ç ‡∞∏‡∞Æ‡∞§‡±Å‡∞≤‡±ç‡∞Ø‡∞Ç‡∞ó‡∞æ ‡∞µ‡∞æ‡∞°‡∞Ç‡∞°‡∞ø ‚Ä¢ ‡∞é‡∞∞‡±Å‡∞µ‡±Å‡∞≤ ‡∞Æ‡±ä‡∞§‡±ç‡∞§‡∞Ç: 120:60:40 ‡∞ï‡∞ø‡∞≤‡±ã‡∞≤‡±Å/‡∞π‡±Ü‡∞ï‡±ç‡∞ü‡∞æ‡∞∞‡±Å

‚ö†Ô∏è ‡∞ú‡∞æ‡∞ó‡±ç‡∞∞‡∞§‡±ç‡∞§‡∞≤‡±Å: ‚Ä¢ ‡∞ï‡±Ä‡∞ü‡∞ï‡∞æ‡∞≤‡±Å, ‡∞µ‡±ç‡∞Ø‡∞æ‡∞ß‡±Å‡∞≤ ‡∞™‡∞∞‡±ç‡∞Ø‡∞µ‡±á‡∞ï‡±ç‡∞∑‡∞£ ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø ‚Ä¢ ‡∞®‡±Ä‡∞ü‡∞ø ‡∞®‡∞æ‡∞£‡±ç‡∞Ø‡∞§ ‡∞ï‡∞æ‡∞™‡∞æ‡∞°‡∞Ç‡∞°‡∞ø

üìÖ ‡∞∏‡∞Æ‡∞Ø‡∞Ç: ‚Ä¢ ‡∞â‡∞¶‡∞Ø‡∞Ç 6-8 ‡∞ó‡∞Ç‡∞ü‡∞≤‡∞ï‡±Å ‡∞µ‡±ç‡∞Ø‡∞µ‡∞∏‡∞æ‡∞Ø ‡∞™‡∞®‡±Å‡∞≤‡±Å ‚Ä¢ ‡∞∏‡∞æ‡∞Ø‡∞Ç‡∞§‡±ç‡∞∞‡∞Ç 4-6 ‡∞ó‡∞Ç‡∞ü‡∞≤‡∞ï‡±Å ‡∞®‡±Ä‡∞∞‡∞Ç‡∞¶‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø`
    } else if (language === "bn") {
      return `üå§Ô∏è ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶™‡¶∞‡¶ø‡¶∏‡ßç‡¶•‡¶ø‡¶§‡¶ø: ${locationText}‡¶è ‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ${weatherCondition} - ‡¶ß‡¶æ‡¶® ‡¶ö‡¶æ‡¶∑‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶â‡¶™‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§

üåæ ‡¶§‡¶æ‡ßé‡¶ï‡ßç‡¶∑‡¶£‡¶ø‡¶ï ‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶ø‡¶∂: ‚Ä¢ ‡¶ú‡ßÅ‡¶®-‡¶ú‡ßÅ‡¶≤‡¶æ‡¶á‡¶Ø‡¶º‡ßá ‡¶¨‡¶™‡¶® ‡¶ï‡¶∞‡ßÅ‡¶® ‚Ä¢ ‡¶ú‡¶Æ‡¶ø‡¶§‡ßá ‡ß®-‡ß´ ‡¶∏‡ßá‡¶Æ‡¶ø ‡¶™‡¶æ‡¶®‡¶ø ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®

üìã ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂: ‚Ä¢ ‡¶≠‡¶æ‡¶≤‡ßã ‡¶ú‡¶æ‡¶§‡ßá‡¶∞ ‡¶¨‡ßÄ‡¶ú ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶® ‚Ä¢ ‡¶®‡¶æ‡¶á‡¶ü‡ßç‡¶∞‡ßã‡¶ú‡ßá‡¶®, ‡¶´‡¶∏‡¶´‡¶∞‡¶æ‡¶∏, ‡¶™‡¶ü‡¶æ‡¶∂ ‡¶∏‡ßÅ‡¶∑‡¶Æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‚Ä¢ ‡¶∏‡¶æ‡¶∞‡ßá‡¶∞ ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£: ‡ßß‡ß®‡ß¶:‡ß¨‡ß¶:‡ß™‡ß¶ ‡¶ï‡ßá‡¶ú‡¶ø/‡¶π‡ßá‡¶ï‡ßç‡¶ü‡¶∞

‚ö†Ô∏è ‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶§‡¶æ: ‚Ä¢ ‡¶™‡ßã‡¶ï‡¶æ‡¶Æ‡¶æ‡¶ï‡¶°‡¶º ‡¶ì ‡¶∞‡ßã‡¶ó‡ßá‡¶∞ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡¶ø‡¶§ ‡¶™‡¶∞‡ßç‡¶Ø‡¶¨‡ßá‡¶ï‡ßç‡¶∑‡¶£ ‚Ä¢ ‡¶™‡¶æ‡¶®‡¶ø‡¶∞ ‡¶ó‡ßÅ‡¶£‡¶Æ‡¶æ‡¶® ‡¶¨‡¶ú‡¶æ‡¶Ø‡¶º ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®

üìÖ ‡¶∏‡¶Æ‡¶Ø‡¶º: ‚Ä¢ ‡¶∏‡¶ï‡¶æ‡¶≤ ‡ß¨-‡ßÆ‡¶ü‡¶æ‡¶Ø‡¶º ‡¶ï‡ßÉ‡¶∑‡¶ø‡¶ï‡¶æ‡¶ú ‚Ä¢ ‡¶∏‡¶®‡ßç‡¶ß‡ßç‡¶Ø‡¶æ ‡ß™-‡ß¨‡¶ü‡¶æ‡¶Ø‡¶º ‡¶∏‡ßá‡¶ö ‡¶¶‡¶ø‡¶®`
    } else if (language === "ta") {
      return `üå§Ô∏è ‡Æ§‡Æ±‡Øç‡Æ™‡Øã‡Æ§‡Øà‡ÆØ ‡Æ®‡Æø‡Æ≤‡Øà‡ÆÆ‡Øà‡Æï‡Æ≥‡Øç: ${locationText}‡Æá‡Æ≤‡Øç ‡Æµ‡Ææ‡Æ©‡Æø‡Æ≤‡Øà ${weatherCondition} - ‡Æ®‡ØÜ‡Æ≤‡Øç ‡Æö‡Ææ‡Æï‡ØÅ‡Æ™‡Æü‡Æø‡Æï‡Øç‡Æï‡ØÅ ‡Æè‡Æ±‡Øç‡Æ±‡Æ§‡ØÅ

üåæ ‡Æâ‡Æü‡Æ©‡Æü‡Æø ‡Æ™‡Æ∞‡Æø‡Æ®‡Øç‡Æ§‡ØÅ‡Æ∞‡Øà‡Æï‡Æ≥‡Øç: ‚Ä¢ ‡Æú‡ØÇ‡Æ©‡Øç-‡Æú‡ØÇ‡Æ≤‡Øà‡ÆØ‡Æø‡Æ≤‡Øç ‡Æµ‡Æø‡Æ§‡Øà‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç ‚Ä¢ ‡Æµ‡ÆØ‡Æ≤‡Æø‡Æ≤‡Øç 2-5 ‡Æö‡ØÜ‡ÆÆ‡ØÄ ‡Æ§‡Æ£‡Øç‡Æ£‡ØÄ‡Æ∞‡Øç ‡Æµ‡Øà‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç

üìã ‡Æµ‡Æø‡Æ∞‡Æø‡Æµ‡Ææ‡Æ© ‡ÆÜ‡Æ≤‡Øã‡Æö‡Æ©‡Øà: ‚Ä¢ ‡Æ®‡Æ≤‡Øç‡Æ≤ ‡Æ∞‡Æï ‡Æµ‡Æø‡Æ§‡Øà‡Æï‡Æ≥‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æµ‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡Æµ‡ØÅ‡ÆÆ‡Øç ‚Ä¢ ‡Æ®‡Øà‡Æü‡Øç‡Æ∞‡Æú‡Æ©‡Øç, ‡Æ™‡Ææ‡Æ∏‡Øç‡Æ™‡Æ∞‡Æ∏‡Øç, ‡Æ™‡Øä‡Æü‡Øç‡Æü‡Ææ‡Æ∑‡Øç ‡Æö‡ÆÆ‡Æö‡Øç‡Æö‡ØÄ‡Æ∞‡Øç ‡Æ™‡ÆØ‡Æ©‡Øç‡Æ™‡Ææ‡Æü‡ØÅ ‚Ä¢ ‡Æâ‡Æ∞‡ÆÆ‡Øç ‡ÆÖ‡Æ≥‡Æµ‡ØÅ: 120:60:40 ‡Æï‡Æø‡Æ≤‡Øã/‡Æπ‡ØÜ‡Æï‡Øç‡Æü‡Øá‡Æ∞‡Øç

‚ö†Ô∏è ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ©‡ØÜ‡Æö‡Øç‡Æö‡Æ∞‡Æø‡Æï‡Øç‡Æï‡Øà‡Æï‡Æ≥‡Øç: ‚Ä¢ ‡Æ™‡ØÇ‡Æö‡Øç‡Æö‡Æø ‡Æ®‡Øã‡ÆØ‡Øç‡Æï‡Æ≥‡Øà ‡Æµ‡Æ¥‡Æï‡Øç‡Æï‡ÆÆ‡Ææ‡Æï ‡Æï‡Æ£‡Øç‡Æï‡Ææ‡Æ£‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç ‚Ä¢ ‡Æ®‡ØÄ‡Æ∞‡Æø‡Æ©‡Øç ‡Æ§‡Æ∞‡Æ§‡Øç‡Æ§‡Øà ‡Æ™‡Æ∞‡Ææ‡ÆÆ‡Æ∞‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç

üìÖ ‡Æ®‡Øá‡Æ∞‡ÆÆ‡Øç: ‚Ä¢ ‡Æï‡Ææ‡Æ≤‡Øà 6-8 ‡ÆÆ‡Æ£‡Æø‡Æï‡Øç‡Æï‡ØÅ ‡Æµ‡Øá‡Æ≥‡Ææ‡Æ£‡Øç‡ÆÆ‡Øà ‡Æ™‡Æ£‡Æø‡Æï‡Æ≥‡Øç ‚Ä¢ ‡ÆÆ‡Ææ‡Æ≤‡Øà 4-6 ‡ÆÆ‡Æ£‡Æø‡Æï‡Øç‡Æï‡ØÅ ‡Æ®‡ØÄ‡Æ∞‡Øç‡Æ™‡Øç‡Æ™‡Ææ‡Æö‡Æ©‡ÆÆ‡Øç`
    } else {
      return `üå§Ô∏è CURRENT CONDITIONS: Weather in ${locationText} is ${weatherCondition} - suitable for rice cultivation

üåæ IMMEDIATE RECOMMENDATIONS: ‚Ä¢ Plant during June-July monsoon ‚Ä¢ Maintain 2-5cm water level in fields

üìã DETAILED ADVICE: ‚Ä¢ Use quality seed varieties like IR64, MTU1010 ‚Ä¢ Apply balanced NPK fertilizers ‚Ä¢ Fertilizer ratio: 120:60:40 kg/hectare

‚ö†Ô∏è PRECAUTIONS: ‚Ä¢ Monitor for pests like stem borer and brown plant hopper ‚Ä¢ Maintain water quality to prevent disease

üìÖ TIMING: ‚Ä¢ Conduct field operations between 6-8 AM ‚Ä¢ Schedule irrigation during 4-6 PM`
    }
  }

  // General farming advice with proper formatting
  if (language === "hi") {
    return `üå§Ô∏è ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§∏‡•ç‡§•‡§ø‡§§‡§ø‡§Ø‡§æ‡§Ç: ${locationText} ‡§Æ‡•á‡§Ç ‡§Æ‡•å‡§∏‡§Æ ${weatherCondition} - ‡§ï‡•É‡§∑‡§ø ‡§ó‡§§‡§ø‡§µ‡§ø‡§ß‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§

üåæ ‡§§‡§§‡•ç‡§ï‡§æ‡§≤ ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•á‡§Ç: ‚Ä¢ ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§ï‡§∞‡§æ‡§è‡§Ç ‚Ä¢ ‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§´‡§∏‡§≤ ‡§ï‡§æ ‡§ö‡§Ø‡§® ‡§ï‡§∞‡•á‡§Ç

üìã ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§∏‡§≤‡§æ‡§π: ‚Ä¢ ‡§ú‡•à‡§µ‡§ø‡§ï ‡§ñ‡§æ‡§¶ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç ‚Ä¢ ‡§â‡§ö‡§ø‡§§ ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ ‡§¨‡§®‡§æ‡§è ‡§∞‡§ñ‡•á‡§Ç ‚Ä¢ ‡§´‡§∏‡§≤ ‡§ö‡§ï‡•ç‡§∞ ‡§Ö‡§™‡§®‡§æ‡§è‡§Ç

‚ö†Ô∏è ‡§∏‡§æ‡§µ‡§ß‡§æ‡§®‡§ø‡§Ø‡§æ‡§Ç: ‚Ä¢ ‡§ï‡•Ä‡§ü-‡§∞‡•ã‡§ó ‡§ï‡•Ä ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä ‡§ï‡§∞‡•á‡§Ç ‚Ä¢ ‡§Æ‡•å‡§∏‡§Æ ‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§®‡•Å‡§Æ‡§æ‡§® ‡§¶‡•á‡§ñ‡•á‡§Ç

üìÖ ‡§∏‡§Æ‡§Ø: ‚Ä¢ ‡§∏‡•ç‡§•‡§æ‡§®‡•Ä‡§Ø ‡§ï‡•É‡§∑‡§ø ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞‡•Ä ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç ‚Ä¢ ‡§ï‡•É‡§∑‡§ø ‡§µ‡§ø‡§ú‡•ç‡§û‡§æ‡§® ‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞ ‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç`
  } else if (language === "te") {
    return `üå§Ô∏è ‡∞™‡±ç‡∞∞‡∞∏‡±ç‡∞§‡±Å‡∞§ ‡∞™‡∞∞‡∞ø‡∞∏‡±ç‡∞•‡∞ø‡∞§‡±Å‡∞≤‡±Å: ${locationText}‡∞≤‡±ã ‡∞µ‡∞æ‡∞§‡∞æ‡∞µ‡∞∞‡∞£‡∞Ç ${weatherCondition} - ‡∞µ‡±ç‡∞Ø‡∞µ‡∞∏‡∞æ‡∞Ø ‡∞ï‡∞æ‡∞∞‡±ç‡∞Ø‡∞ï‡∞≤‡∞æ‡∞™‡∞æ‡∞≤‡∞ï‡±Å ‡∞Ö‡∞®‡•Å‡∞ï‡±Ç‡∞≤‡∞Ç

üåæ ‡∞§‡∞ï‡±ç‡∞∑‡∞£ ‡∞∏‡∞ø‡∞´‡∞æ‡∞∞‡±ç‡∞∏‡±Å‡∞≤‡±Å: ‚Ä¢ ‡∞Æ‡∞ü‡±ç‡∞ü‡∞ø ‡∞™‡∞∞‡±Ä‡∞ï‡±ç‡∞∑ ‡∞ö‡±á‡∞Ø‡∞ø‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø ‚Ä¢ ‡∞µ‡∞æ‡∞§‡∞æ‡∞µ‡∞∞‡∞£‡∞Ç ‡∞™‡±ç‡∞∞‡∞ï‡∞æ‡∞∞‡∞Ç ‡∞™‡∞Ç‡∞ü ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø

üìã ‡∞µ‡∞ø‡∞µ‡∞∞‡∞£‡∞æ‡∞§‡±ç‡∞Æ‡∞ï ‡∞∏‡∞≤‡∞π‡∞æ: ‚Ä¢ ‡∞∏‡±á‡∞Ç‡∞¶‡±ç‡∞∞‡±Ä‡∞Ø ‡∞é‡∞∞‡±Å‡∞µ‡±Å‡∞≤‡±Å ‡∞µ‡∞æ‡∞°‡∞Ç‡∞°‡∞ø ‚Ä¢ ‡∞∏‡∞∞‡±à‡∞® ‡∞®‡±Ä‡∞ü‡∞ø‡∞™‡∞æ‡∞∞‡±Å‡∞¶‡∞≤ ‡∞µ‡±ç‡∞Ø‡∞µ‡∞∏‡±ç‡∞• ‚Ä¢ ‡∞™‡∞Ç‡∞ü ‡∞Æ‡∞æ‡∞∞‡±ç‡∞™‡∞ø‡∞°‡∞ø ‡∞™‡∞¶‡±ç‡∞ß‡∞§‡∞ø ‡∞Ö‡∞®‡±Å‡∞∏‡∞∞‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø

‚ö†Ô∏è ‡∞ú‡∞æ‡∞ó‡±ç‡∞∞‡∞§‡±ç‡∞§‡∞≤‡±Å: ‚Ä¢ ‡∞ï‡±Ä‡∞ü‡∞ï‡∞æ‡∞≤‡±Å, ‡∞µ‡±ç‡∞Ø‡∞æ‡∞ß‡±Å‡∞≤ ‡∞™‡∞∞‡±ç‡∞Ø‡∞µ‡±á‡∞ï‡±ç‡∞∑‡∞£ ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø ‚Ä¢ ‡∞µ‡∞æ‡∞§‡∞æ‡∞µ‡∞∞‡∞£ ‡∞∏‡∞Æ‡∞æ‡∞ö‡∞æ‡∞∞‡∞Ç ‡∞§‡±Ü‡∞≤‡±Å‡∞∏‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø

üìÖ ‡∞∏‡∞Æ‡∞Ø‡∞Ç: ‚Ä¢ ‡∞∏‡±ç‡∞•‡∞æ‡∞®‡∞ø‡∞ï ‡∞µ‡±ç‡∞Ø‡∞µ‡∞∏‡∞æ‡∞Ø ‡∞Ö‡∞ß‡∞ø‡∞ï‡∞æ‡∞∞‡∞ø‡∞®‡∞ø ‡∞∏‡∞Ç‡∞™‡±ç‡∞∞‡∞¶‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø ‚Ä¢ ‡∞ï‡±É‡∞∑‡∞ø ‡∞µ‡∞ø‡∞ú‡±ç‡∞û‡∞æ‡∞® ‡∞ï‡±á‡∞Ç‡∞¶‡±ç‡∞∞‡∞Ç‡∞§‡±ã ‡∞∏‡∞Ç‡∞¨‡∞Ç‡∞ß‡∞Ç ‡∞™‡±Ü‡∞ü‡±ç‡∞ü‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø`
  } else if (language === "bn") {
    return `üå§Ô∏è ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶™‡¶∞‡¶ø‡¶∏‡ßç‡¶•‡¶ø‡¶§‡¶ø: ${locationText}‡¶è ‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ${weatherCondition} - ‡¶ï‡ßÉ‡¶∑‡¶ø ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶â‡¶™‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§

üåæ ‡¶§‡¶æ‡ßé‡¶ï‡ßç‡¶∑‡¶£‡¶ø‡¶ï ‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶ø‡¶∂: ‚Ä¢ ‡¶Æ‡¶æ‡¶ü‡¶ø ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶æ‡¶® ‚Ä¢ ‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶´‡¶∏‡¶≤ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®

üìã ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂: ‚Ä¢ ‡¶ú‡ßà‡¶¨ ‡¶∏‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶® ‚Ä¢ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶∏‡ßá‡¶ö ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ ‡¶¨‡¶ú‡¶æ‡¶Ø‡¶º ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶® ‚Ä¢ ‡¶´‡¶∏‡¶≤ ‡¶Ü‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶∞‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®

‚ö†Ô∏è ‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶§‡¶æ: ‚Ä¢ ‡¶™‡ßã‡¶ï‡¶æ‡¶Æ‡¶æ‡¶ï‡¶°‡¶º ‡¶ì ‡¶∞‡ßã‡¶ó‡ßá‡¶∞ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡¶ø‡¶§ ‡¶™‡¶∞‡ßç‡¶Ø‡¶¨‡ßá‡¶ï‡ßç‡¶∑‡¶£ ‚Ä¢ ‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡¶æ‡¶≠‡¶æ‡¶∏ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®

üìÖ ‡¶∏‡¶Æ‡¶Ø‡¶º: ‚Ä¢ ‡¶∏‡ßç‡¶•‡¶æ‡¶®‡ßÄ‡¶Ø‡¶º ‡¶ï‡ßÉ‡¶∑‡¶ø ‡¶ï‡¶∞‡ßç‡¶Æ‡¶ï‡¶∞‡ßç‡¶§‡¶æ‡¶∞ ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶®‡¶ø‡¶® ‚Ä¢ ‡¶ï‡ßÉ‡¶∑‡¶ø ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶® ‡¶ï‡ßá‡¶®‡ßç‡¶¶‡ßç‡¶∞‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®`
  } else if (language === "ta") {
    return `üå§Ô∏è ‡Æ§‡Æ±‡Øç‡Æ™‡Øã‡Æ§‡Øà‡ÆØ ‡Æ®‡Æø‡Æ≤‡Øà‡ÆÆ‡Øà‡Æï‡Æ≥‡Øç: ${locationText}‡Æá‡Æ≤‡Øç ‡Æµ‡Ææ‡Æ©‡Æø‡Æ≤‡Øà ${weatherCondition} - ‡Æµ‡Æø‡Æµ‡Æö‡Ææ‡ÆØ ‡Æ®‡Æü‡Æµ‡Æü‡Æø‡Æï‡Øç‡Æï‡Øà‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æè‡Æ±‡Øç‡Æ±‡Æ§‡ØÅ

üåæ ‡Æâ‡Æü‡Æ©‡Æü‡Æø ‡Æ™‡Æ∞‡Æø‡Æ®‡Øç‡Æ§‡ØÅ‡Æ∞‡Øà‡Æï‡Æ≥‡Øç: ‚Ä¢ ‡ÆÆ‡Æ£‡Øç ‡Æ™‡Æ∞‡Æø‡Æö‡Øã‡Æ§‡Æ©‡Øà ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡Æµ‡ØÅ‡ÆÆ‡Øç ‚Ä¢ ‡Æµ‡Ææ‡Æ©‡Æø‡Æ≤‡Øà ‡ÆÖ‡Æü‡Æø‡Æ™‡Øç‡Æ™‡Æü‡Øà‡ÆØ‡Æø‡Æ≤‡Øç ‡Æ™‡ÆØ‡Æø‡Æ∞‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æµ‡ØÅ

üìã ‡Æµ‡Æø‡Æ∞‡Æø‡Æµ‡Ææ‡Æ© ‡ÆÜ‡Æ≤‡Øã‡Æö‡Æ©‡Øà: ‚Ä¢ ‡Æá‡ÆØ‡Æ±‡Øç‡Æï‡Øà ‡Æâ‡Æ∞‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ™‡ÆØ‡Æ©‡Øç‡Æ™‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡Æµ‡ØÅ‡ÆÆ‡Øç ‚Ä¢ ‡Æö‡Æ∞‡Æø‡ÆØ‡Ææ‡Æ© ‡Æ®‡ØÄ‡Æ∞‡Øç‡Æ™‡Øç‡Æ™‡Ææ‡Æö‡Æ© ‡ÆÆ‡ØÅ‡Æ±‡Øà ‚Ä¢ ‡Æ™‡ÆØ‡Æø‡Æ∞‡Øç ‡ÆÆ‡Ææ‡Æ±‡Øç‡Æ±‡ØÅ ‡ÆÆ‡ØÅ‡Æ±‡Øà ‡Æï‡Æü‡Øà‡Æ™‡Æø‡Æü‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç

‚ö†Ô∏è ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ©‡ØÜ‡Æö‡Øç‡Æö‡Æ∞‡Æø‡Æï‡Øç‡Æï‡Øà‡Æï‡Æ≥‡Øç: ‚Ä¢ ‡Æ™‡ØÇ‡Æö‡Øç‡Æö‡Æø ‡Æ®‡Øã‡ÆØ‡Øç‡Æï‡Æ≥‡Øà ‡Æµ‡Æ¥‡Æï‡Øç‡Æï‡ÆÆ‡Ææ‡Æï ‡Æï‡Æ£‡Øç‡Æï‡Ææ‡Æ£‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç ‚Ä¢ ‡Æµ‡Ææ‡Æ©‡Æø‡Æ≤‡Øà ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ©‡Æ±‡Æø‡Æµ‡Æø‡Æ™‡Øç‡Æ™‡ØÅ ‡Æ™‡Ææ‡Æ∞‡Øç‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç

üìÖ ‡Æ®‡Øá‡Æ∞‡ÆÆ‡Øç: ‚Ä¢ ‡Æâ‡Æ≥‡Øç‡Æ≥‡ØÇ‡Æ∞‡Øç ‡Æµ‡Æø‡Æµ‡Æö‡Ææ‡ÆØ ‡ÆÖ‡Æ≤‡ØÅ‡Æµ‡Æ≤‡Æ∞‡Øà ‡ÆÖ‡Æ£‡ØÅ‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç ‚Ä¢ ‡Æµ‡Øá‡Æ≥‡Ææ‡Æ£‡Øç ‡ÆÖ‡Æ±‡Æø‡Æµ‡Æø‡ÆØ‡Æ≤‡Øç ‡ÆÆ‡Øà‡ÆØ‡Æ§‡Øç‡Æ§‡ØÅ‡Æü‡Æ©‡Øç ‡Æ§‡Øä‡Æü‡Æ∞‡Øç‡Æ™‡ØÅ ‡Æï‡Øä‡Æ≥‡Øç‡Æ≥‡Æµ‡ØÅ‡ÆÆ‡Øç`
  } else {
    return `üå§Ô∏è CURRENT CONDITIONS: Weather in ${locationText} is ${weatherCondition} - suitable for farming activities

üåæ IMMEDIATE RECOMMENDATIONS: ‚Ä¢ Conduct soil testing ‚Ä¢ Choose crops based on weather patterns

üìã DETAILED ADVICE: ‚Ä¢ Use organic fertilizers for soil health ‚Ä¢ Maintain proper irrigation system ‚Ä¢ Follow crop rotation practices for sustainability

‚ö†Ô∏è PRECAUTIONS: ‚Ä¢ Monitor crops regularly for pests and diseases ‚Ä¢ Check weather forecasts before field operations

üìÖ TIMING: ‚Ä¢ Consult local agricultural extension officers ‚Ä¢ Visit nearest Krishi Vigyan Kendra for guidance`
  }
}
